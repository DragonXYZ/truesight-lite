0x0000: nop
0x0001: ldarg 1 (b)
0x0002: ldarg 0 (a)
0x0003: ldc int 15
0x0005: add
0x0006: cast val->val double
0x0007: lt
0x0009: ldc int 0
0x000a: eq
0x000c: stloc 13 (CS$4$0000)
0x000e: ldloc 13 (CS$4$0000)
0x0010: branch true 0x00b8
0x0015: nop
0x0016: ldarg 1 (b)
0x0017: ldarg 0 (a)
0x0018: cast val->val double
0x0019: div
0x001a: stloc 14 (CS$0$0001)
0x001c: ldloca 14 (CS$0$0001)
0x001e: call String double::ToString()
0x0023: ldc String "str"
0x0028: call String String::Concat(String str0, String str1)
0x002d: call virt String Object::ToString()
0x0032: stloc 0 (s)
0x0033: nop
0x0034: ldarg 0 (a)
0x0035: ldc int 10
0x0037: add ovf
0x0038: stloc 1 (x)
0x0039: ldc int 4
0x003a: ldloc 1 (x)
0x003b: cast ovf, val->val uint
0x003c: add un, ovf
0x003d: stloc 2 (y)
0x003e: ldfld String String::Empty
0x0043: ldloc 1 (x)
0x0044: cast val->ref Object
0x0049: ldloc 2 (y)
0x004a: cast val->ref Object
0x004f: call String String::Concat(Object arg0, Object arg1, Object arg2)
0x0054: call LevelLogger Log::WriteLine(String message)
0x0059: pop
0x005a: ldc int 15
0x005c: starg 0 (a)
0x005e: ldc int 1
0x005f: new Type[]::.ctor(int )
0x0064: stloc 3 (arr)
0x0065: ldloc 3 (arr)
0x0066: ldc int 0
0x0067: ldc typeof(float).TypeHandle
0x006c: call Type Type::GetTypeFromHandle(RuntimeTypeHandle handle)
0x0071: stelem Object
0x0072: ldarg 0 (a)
0x0073: cast val->ref Object
0x0078: stloc 4 (abox)
0x007a: ldloc 4 (abox)
0x007c: cast refval->refval uint
0x0081: cast un, ovf, val->val int
0x0082: ldc int 5
0x0083: add ovf
0x0084: cast val->val double
0x0085: starg 1 (b)
0x0087: ldarg 1 (b)
0x0088: cast ovf, val->val uint
0x0089: ldc int 2
0x008a: lt un
0x008c: stloc 5 (c)
0x008e: ldc typeof(Type).TypeHandle
0x0093: call Type Type::GetTypeFromHandle(RuntimeTypeHandle handle)
0x0098: stloc 6 (z)
0x009a: ldloc 6 (z)
0x009c: call virt String Object::ToString()
0x00a1: ldc int 8
0x00a2: cast val->ref Object
0x00a7: call String String::Concat(Object arg0, Object arg1)
0x00ac: call LevelLogger Log::WriteLine(String message)
0x00b1: pop
0x00b2: new NotSupportedException::.ctor()
0x00b7: throw
0x00b8: new <Closure>::.ctor()
0x00bd: stloc 12 (<Closure>)
0x00bf: nop
0x00c0: call DateTime DateTime::get_Now()
0x00c5: stloc 7 (dt1)
0x00c7: ldloc 12 (<Closure>)
0x00c9: ldflda DateTime <Closure>::dt
0x00ce: ldc int 1987
0x00d3: ldc int 8
0x00d4: ldc int 5
0x00d5: new DateTime::.ctor(int year, int month, int day)
0x00da: stind DateTime
0x00df: ldloc 12 (<Closure>)
0x00e1: ldc int 2
0x00e2: new DateTime[]::.ctor(int )
0x00e7: stloc 15 (CS$0$0002)
0x00e9: ldloc 15 (CS$0$0002)
0x00eb: ldc int 0
0x00ec: ldelema DateTime
0x00f1: ldloc 12 (<Closure>)
0x00f3: ldfld DateTime <Closure>::dt
0x00f8: stind DateTime
0x00fd: ldloc 15 (CS$0$0002)
0x00ff: ldc int 1
0x0100: ldelema DateTime
0x0105: ldloca 7 (dt1)
0x0107: call int DateTime::get_Year()
0x010c: ldloca 7 (dt1)
0x010e: call int DateTime::get_Month()
0x0113: ldloca 7 (dt1)
0x0115: call int DateTime::get_Day()
0x011a: new DateTime::.ctor(int year, int month, int day)
0x011f: stind DateTime
0x0124: ldloc 15 (CS$0$0002)
0x0126: stfld DateTime[] <Closure>::arr
0x012b: ldloc 12 (<Closure>)
0x012d: ldfld DateTime[] <Closure>::arr
0x0132: ldlen
0x0133: cast val->val int
0x0134: new List`1::.ctor()
0x0139: call int List`1::get_Count()
0x013e: eq
0x0140: call bool AssertionHelper::AssertTrue(bool obj)
0x0145: pop
0x0146: ldloc 12 (<Closure>)
0x0148: ldftn int <Closure>::<SmallSnippetWithoutSwitch>b__3(int i)
0x014e: new Func`2::.ctor(Object object, IntPtr method)
0x0153: stloc 8 (foo)
0x0155: ldloc 8 (foo)
0x0157: ldloc 12 (<Closure>)
0x0159: ldfld DateTime[] <Closure>::arr
0x015e: ldlen
0x015f: cast val->val int
0x0160: call virt int Func`2::Invoke(int arg)
0x0165: cast val->val double
0x0166: ldc double 5
0x016f: eq
0x0171: ldc int 0
0x0172: eq
0x0174: call bool AssertionHelper::AssertTrue(bool obj)
0x0179: pop
0x017a: ldloc 12 (<Closure>)
0x017c: ldfld DateTime[] <Closure>::arr
0x0181: ldc int 4
0x0182: ldelema DateTime
0x0187: ldloc 12 (<Closure>)
0x0189: ldfld DateTime <Closure>::dt
0x018e: stind DateTime
0x0193: new List`1::.ctor()
0x0198: stloc 9 (dts)
0x019a: ldloc 9 (dts)
0x019c: ldc int 0
0x019d: call virt DateTime List`1::get_Item(int index)
0x01a2: stloc 16 (CS$0$0003)
0x01a4: ldloca 16 (CS$0$0003)
0x01a6: [constrained DateTime] call virt String Object::ToString()
0x01b1: stloc 10 (ss)
0x01b3: ldc null
0x01b4: stloc 11 (iilop)
0x01b6: ldloc 11 (iilop)
0x01b8: isinst ILOp
0x01bd: branch false 0x01e9
0x01bf: ldc int 2
0x01c0: new String[]::.ctor(int )
0x01c5: stloc 17 (CS$0$0004)
0x01c7: ldloc 17 (CS$0$0004)
0x01c9: ldc int 0
0x01ca: ldc String "hello"
0x01cf: stelem Object
0x01d0: ldloc 17 (CS$0$0004)
0x01d2: ldc int 1
0x01d3: ldc String "world"
0x01d8: stelem Object
0x01d9: ldloc 17 (CS$0$0004)
0x01db: ldc int 0
0x01dc: ldelem Object
0x01dd: ldc String "hello"
0x01e2: call bool String::op_Equality(String a, String b)
0x01e7: branch 0x01ea
0x01e9: ldc int 0
0x01ea: call bool AssertionHelper::AssertFalse(bool obj)
0x01ef: pop
0x01f0: nop
0x01f1: ret