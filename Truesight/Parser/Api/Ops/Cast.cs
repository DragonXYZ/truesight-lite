//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // conv.i1, conv.i2, conv.i4, conv.i8, conv.r4, conv.r8, conv.u4, conv.u8, castclass, conv.r.un, unbox, conv.ovf.i1.un, conv.ovf.i2.un, conv.ovf.i4.un, conv.ovf.i8.un, conv.ovf.u1.un, conv.ovf.u2.un, conv.ovf.u4.un, conv.ovf.u8.un, conv.ovf.i.un, conv.ovf.u.un, box, unbox.any, conv.ovf.i1, conv.ovf.u1, conv.ovf.i2, conv.ovf.u2, conv.ovf.i4, conv.ovf.u4, conv.ovf.i8, conv.ovf.u8, conv.u2, conv.u1, conv.i, conv.ovf.i, conv.ovf.u, conv.u
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x74, 0x76, 0x79, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0xa5, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xe0)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Cast : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Cast; } }

        private readonly int _typeToken;

        internal Cast(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Cast(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // initializing _typeToken
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x67: //conv.i1
                case 0x68: //conv.i2
                case 0x69: //conv.i4
                case 0x6a: //conv.i8
                case 0x6b: //conv.r4
                case 0x6c: //conv.r8
                case 0x6d: //conv.u4
                case 0x6e: //conv.u8
                case 0x76: //conv.r.un
                case 0x82: //conv.ovf.i1.un
                case 0x83: //conv.ovf.i2.un
                case 0x84: //conv.ovf.i4.un
                case 0x85: //conv.ovf.i8.un
                case 0x86: //conv.ovf.u1.un
                case 0x87: //conv.ovf.u2.un
                case 0x88: //conv.ovf.u4.un
                case 0x89: //conv.ovf.u8.un
                case 0x8a: //conv.ovf.i.un
                case 0x8b: //conv.ovf.u.un
                case 0xb3: //conv.ovf.i1
                case 0xb4: //conv.ovf.u1
                case 0xb5: //conv.ovf.i2
                case 0xb6: //conv.ovf.u2
                case 0xb7: //conv.ovf.i4
                case 0xb8: //conv.ovf.u4
                case 0xb9: //conv.ovf.i8
                case 0xba: //conv.ovf.u8
                case 0xd1: //conv.u2
                case 0xd2: //conv.u1
                case 0xd3: //conv.i
                case 0xd4: //conv.ovf.i
                case 0xd5: //conv.ovf.u
                case 0xe0: //conv.u
                    _typeToken = default(int);
                    break;
                case 0x74: //castclass
                case 0x79: //unbox
                case 0x8c: //box
                case 0xa5: //unbox.any
                    _typeToken = ReadMetadataToken(reader);
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                return false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // conv.i1, conv.i2, conv.i4, conv.i8, conv.r4, conv.r8, conv.u4, conv.u8, castclass, conv.r.un, unbox, conv.ovf.i1.un, conv.ovf.i2.un, conv.ovf.i4.un, conv.ovf.i8.un, conv.ovf.u1.un, conv.ovf.u2.un, conv.ovf.u4.un, conv.ovf.u8.un, conv.ovf.i.un, conv.ovf.u.un, box, unbox.any, conv.ovf.i1, conv.ovf.u1, conv.ovf.i2, conv.ovf.u2, conv.ovf.i4, conv.ovf.u4, conv.ovf.i8, conv.ovf.u8, conv.u2, conv.u1, conv.i, conv.ovf.i, conv.ovf.u, conv.u
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x74, 0x76, 0x79, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0xa5, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xe0}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public bool ExpectsRef
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x76: //conv.r.un
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0x8c: //box
                    case 0xa5: //unbox.any
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0x74: //castclass
                    case 0x79: //unbox
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool ExpectsRefOrVal
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x74: //castclass
                    case 0x76: //conv.r.un
                    case 0x79: //unbox
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0x8c: //box
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0xa5: //unbox.any
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool ExpectsUn
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x74: //castclass
                    case 0x79: //unbox
                    case 0x8c: //box
                    case 0xa5: //unbox.any
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0x76: //conv.r.un
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool ExpectsVal
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x76: //conv.r.un
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0x8c: //box
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return true;
                    case 0x74: //castclass
                    case 0x79: //unbox
                    case 0xa5: //unbox.any
                        return default(bool);
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool FailsOnOverflow
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x74: //castclass
                    case 0x76: //conv.r.un
                    case 0x79: //unbox
                    case 0x8c: //box
                    case 0xa5: //unbox.any
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public global::System.Type Type
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x82: //conv.ovf.i1.un
                    case 0xb3: //conv.ovf.i1
                        return typeof(sbyte);
                    case 0x68: //conv.i2
                    case 0x83: //conv.ovf.i2.un
                    case 0xb5: //conv.ovf.i2
                        return typeof(short);
                    case 0x69: //conv.i4
                    case 0x84: //conv.ovf.i4.un
                    case 0xb7: //conv.ovf.i4
                        return typeof(int);
                    case 0x6a: //conv.i8
                    case 0x85: //conv.ovf.i8.un
                    case 0xb9: //conv.ovf.i8
                        return typeof(long);
                    case 0x6b: //conv.r4
                    case 0x76: //conv.r.un
                        return typeof(float);
                    case 0x6c: //conv.r8
                        return typeof(double);
                    case 0x6d: //conv.u4
                    case 0x88: //conv.ovf.u4.un
                    case 0xb8: //conv.ovf.u4
                        return typeof(uint);
                    case 0x6e: //conv.u8
                    case 0x89: //conv.ovf.u8.un
                    case 0xba: //conv.ovf.u8
                        return typeof(ulong);
                    case 0x74: //castclass
                    case 0x79: //unbox
                    case 0xa5: //unbox.any
                        return TypeFromToken(_typeToken);
                    case 0x86: //conv.ovf.u1.un
                    case 0xb4: //conv.ovf.u1
                    case 0xd2: //conv.u1
                        return typeof(byte);
                    case 0x87: //conv.ovf.u2.un
                    case 0xb6: //conv.ovf.u2
                    case 0xd1: //conv.u2
                        return typeof(ushort);
                    case 0x8a: //conv.ovf.i.un
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                        return typeof(global::System.IntPtr);
                    case 0x8b: //conv.ovf.u.un
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return typeof(global::System.UIntPtr);
                    case 0x8c: //box
                        return typeof(global::System.Object);
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public int TypeToken
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x76: //conv.r.un
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(int);
                    case 0x74: //castclass
                    case 0x79: //unbox
                    case 0x8c: //box
                    case 0xa5: //unbox.any
                        return _typeToken;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool YieldsRef
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x76: //conv.r.un
                    case 0x79: //unbox
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0xa5: //unbox.any
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0x74: //castclass
                    case 0x8c: //box
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool YieldsRefOrVal
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x74: //castclass
                    case 0x76: //conv.r.un
                    case 0x79: //unbox
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0x8c: //box
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return default(bool);
                    case 0xa5: //unbox.any
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool YieldsVal
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x67: //conv.i1
                    case 0x68: //conv.i2
                    case 0x69: //conv.i4
                    case 0x6a: //conv.i8
                    case 0x6b: //conv.r4
                    case 0x6c: //conv.r8
                    case 0x6d: //conv.u4
                    case 0x6e: //conv.u8
                    case 0x76: //conv.r.un
                    case 0x79: //unbox
                    case 0x82: //conv.ovf.i1.un
                    case 0x83: //conv.ovf.i2.un
                    case 0x84: //conv.ovf.i4.un
                    case 0x85: //conv.ovf.i8.un
                    case 0x86: //conv.ovf.u1.un
                    case 0x87: //conv.ovf.u2.un
                    case 0x88: //conv.ovf.u4.un
                    case 0x89: //conv.ovf.u8.un
                    case 0x8a: //conv.ovf.i.un
                    case 0x8b: //conv.ovf.u.un
                    case 0xb3: //conv.ovf.i1
                    case 0xb4: //conv.ovf.u1
                    case 0xb5: //conv.ovf.i2
                    case 0xb6: //conv.ovf.u2
                    case 0xb7: //conv.ovf.i4
                    case 0xb8: //conv.ovf.u4
                    case 0xb9: //conv.ovf.i8
                    case 0xba: //conv.ovf.u8
                    case 0xd1: //conv.u2
                    case 0xd2: //conv.u1
                    case 0xd3: //conv.i
                    case 0xd4: //conv.ovf.i
                    case 0xd5: //conv.ovf.u
                    case 0xe0: //conv.u
                        return true;
                    case 0x74: //castclass
                    case 0x8c: //box
                    case 0xa5: //unbox.any
                        return default(bool);
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  "cast";
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            mods.Add(ExpectsUn ? "un" : "");
            mods.Add(FailsOnOverflow ? "ovf" : "");
            mods.Add(global::System.String.Format("{0}->{1}", ExpectsRefOrVal ? "refval" : (ExpectsRef ? "ref" : (ExpectsVal ? "val" : "???")), YieldsRefOrVal ? "refval" : (YieldsRef ? "ref" : (YieldsVal ? "val" : "???"))));
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = ((Type != null ? TypeToString(Type) : null) ?? ((_typeToken == 0 ? (Type != null ? TypeToString(Type) : null) : ("0x" + TypeToken.ToString("x8")))));

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}