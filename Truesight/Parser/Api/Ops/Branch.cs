//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // br.s, brfalse.s, brtrue.s, beq.s, bge.s, bgt.s, ble.s, blt.s, bne.un.s, bge.un.s, bgt.un.s, ble.un.s, blt.un.s, br, brfalse, brtrue, beq, bge, bgt, ble, blt, bne.un, bge.un, bgt.un, ble.un, blt.un, leave, leave.s
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0xdd, 0xde)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Branch : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Branch; } }

        private readonly int _relativeTargetOffset;
        private readonly int _absoluteTargetOffset;

        internal Branch(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Branch(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // initializing _relativeTargetOffset
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x2b: //br.s
                case 0x2c: //brfalse.s
                case 0x2d: //brtrue.s
                case 0x2e: //beq.s
                case 0x2f: //bge.s
                case 0x30: //bgt.s
                case 0x31: //ble.s
                case 0x32: //blt.s
                case 0x33: //bne.un.s
                case 0x34: //bge.un.s
                case 0x35: //bgt.un.s
                case 0x36: //ble.un.s
                case 0x37: //blt.un.s
                case 0xde: //leave.s
                    _relativeTargetOffset = ReadI1(reader);
                    break;
                case 0x38: //br
                case 0x39: //brfalse
                case 0x3a: //brtrue
                case 0x3b: //beq
                case 0x3c: //bge
                case 0x3d: //bgt
                case 0x3e: //ble
                case 0x3f: //blt
                case 0x40: //bne.un
                case 0x41: //bge.un
                case 0x42: //bgt.un
                case 0x43: //ble.un
                case 0x44: //blt.un
                case 0xdd: //leave
                    _relativeTargetOffset = ReadI4(reader);
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // initializing _absoluteTargetOffset
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x2b: //br.s
                case 0x2c: //brfalse.s
                case 0x2d: //brtrue.s
                case 0x2e: //beq.s
                case 0x2f: //bge.s
                case 0x30: //bgt.s
                case 0x31: //ble.s
                case 0x32: //blt.s
                case 0x33: //bne.un.s
                case 0x34: //bge.un.s
                case 0x35: //bgt.un.s
                case 0x36: //ble.un.s
                case 0x37: //blt.un.s
                case 0xde: //leave.s
                    _absoluteTargetOffset = (int)origPos + sizeof(sbyte) + _relativeTargetOffset;
                    break;
                case 0x38: //br
                case 0x39: //brfalse
                case 0x3a: //brtrue
                case 0x3b: //beq
                case 0x3c: //bge
                case 0x3d: //bgt
                case 0x3e: //ble
                case 0x3f: //blt
                case 0x40: //bne.un
                case 0x41: //bge.un
                case 0x42: //bgt.un
                case 0x43: //ble.un
                case 0x44: //blt.un
                case 0xdd: //leave
                    _absoluteTargetOffset = (int)origPos + sizeof(int) + _relativeTargetOffset;
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                return false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // br.s, brfalse.s, brtrue.s, beq.s, bge.s, bgt.s, ble.s, blt.s, bne.un.s, bge.un.s, bgt.un.s, ble.un.s, blt.un.s, br, brfalse, brtrue, beq, bge, bgt, ble, blt, bne.un, bge.un, bgt.un, ble.un, blt.un, leave, leave.s
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0xdd, 0xde}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public int AbsoluteTargetOffset
        {
            get
            {
                return _absoluteTargetOffset;
            }
        }

        public bool ExpectsUn
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x2b: //br.s
                    case 0x2c: //brfalse.s
                    case 0x2d: //brtrue.s
                    case 0x2e: //beq.s
                    case 0x2f: //bge.s
                    case 0x30: //bgt.s
                    case 0x31: //ble.s
                    case 0x32: //blt.s
                    case 0x38: //br
                    case 0x39: //brfalse
                    case 0x3a: //brtrue
                    case 0x3b: //beq
                    case 0x3c: //bge
                    case 0x3d: //bgt
                    case 0x3e: //ble
                    case 0x3f: //blt
                    case 0xdd: //leave
                    case 0xde: //leave.s
                        return default(bool);
                    case 0x33: //bne.un.s
                    case 0x34: //bge.un.s
                    case 0x35: //bgt.un.s
                    case 0x36: //ble.un.s
                    case 0x37: //blt.un.s
                    case 0x40: //bne.un
                    case 0x41: //bge.un
                    case 0x42: //bgt.un
                    case 0x43: //ble.un
                    case 0x44: //blt.un
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public Truesight.Parser.Api.Ops.PredicateType? PredicateType
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x2b: //br.s
                    case 0x38: //br
                    case 0xdd: //leave
                    case 0xde: //leave.s
                        return default(Truesight.Parser.Api.Ops.PredicateType?);
                    case 0x2c: //brfalse.s
                    case 0x39: //brfalse
                        return Truesight.Parser.Api.Ops.PredicateType.IsFalse;
                    case 0x2d: //brtrue.s
                    case 0x3a: //brtrue
                        return Truesight.Parser.Api.Ops.PredicateType.IsTrue;
                    case 0x2e: //beq.s
                    case 0x3b: //beq
                        return Truesight.Parser.Api.Ops.PredicateType.Equal;
                    case 0x2f: //bge.s
                    case 0x34: //bge.un.s
                    case 0x3c: //bge
                    case 0x41: //bge.un
                        return Truesight.Parser.Api.Ops.PredicateType.GreaterThanOrEqual;
                    case 0x30: //bgt.s
                    case 0x35: //bgt.un.s
                    case 0x3d: //bgt
                    case 0x42: //bgt.un
                        return Truesight.Parser.Api.Ops.PredicateType.GreaterThan;
                    case 0x31: //ble.s
                    case 0x36: //ble.un.s
                    case 0x3e: //ble
                    case 0x43: //ble.un
                        return Truesight.Parser.Api.Ops.PredicateType.LessThanOrEqual;
                    case 0x32: //blt.s
                    case 0x37: //blt.un.s
                    case 0x3f: //blt
                    case 0x44: //blt.un
                        return Truesight.Parser.Api.Ops.PredicateType.LessThan;
                    case 0x33: //bne.un.s
                    case 0x40: //bne.un
                        return Truesight.Parser.Api.Ops.PredicateType.NotEqual;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public int RelativeTargetOffset
        {
            get
            {
                return _relativeTargetOffset;
            }
        }

        public global::Truesight.Parser.Api.IILOp Target
        {
            get
            {
                return ResolveReference(_absoluteTargetOffset);
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  "branch";
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            mods.Add(ExpectsUn ? "un" : "");
            mods.Add(PredicateTypeToString(PredicateType));
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = OffsetToString(_absoluteTargetOffset);

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}