//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // ldnull, ldc.i4.m1, ldc.i4.0, ldc.i4.1, ldc.i4.2, ldc.i4.3, ldc.i4.4, ldc.i4.5, ldc.i4.6, ldc.i4.7, ldc.i4.8, ldc.i4.s, ldc.i4, ldc.i8, ldc.r4, ldc.r8, ldstr, ldtoken
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x72, 0xd0)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Ldc : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Ldc; } }

        private readonly global::System.Object _constValue;
        private readonly bool _useConstValue;
        private readonly global::System.Object _value;

        internal Ldc(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Ldc(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // initializing _constValue
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x14: //ldnull
                    _constValue = null;
                    break;
                case 0x15: //ldc.i4.m1
                    _constValue = -1;
                    break;
                case 0x16: //ldc.i4.0
                    _constValue = 0;
                    break;
                case 0x17: //ldc.i4.1
                    _constValue = 1;
                    break;
                case 0x18: //ldc.i4.2
                    _constValue = 2;
                    break;
                case 0x19: //ldc.i4.3
                    _constValue = 3;
                    break;
                case 0x1a: //ldc.i4.4
                    _constValue = 4;
                    break;
                case 0x1b: //ldc.i4.5
                    _constValue = 5;
                    break;
                case 0x1c: //ldc.i4.6
                    _constValue = 6;
                    break;
                case 0x1d: //ldc.i4.7
                    _constValue = 7;
                    break;
                case 0x1e: //ldc.i4.8
                    _constValue = 8;
                    break;
                case 0x1f: //ldc.i4.s
                case 0x20: //ldc.i4
                case 0x21: //ldc.i8
                case 0x22: //ldc.r4
                case 0x23: //ldc.r8
                    _constValue = default(global::System.Object);
                    break;
                case 0x72: //ldstr
                    _constValue = ((global::System.Func<global::System.String>)(() => { var token = ReadMetadataToken(reader); return StringFromToken(token) ?? ("string at 0x" + token.ToString("x8")); }))();
                    break;
                case 0xd0: //ldtoken
                    _constValue = ((global::System.Func<global::System.Object>)(() => { var i_token = ReadMetadataToken(reader); var token = new global::Truesight.Parser.Api.Ops.RuntimeHandle(Source.Module, Source.Type, Source.Method, i_token); try {     var resolved = token.ResolveHandle();     if (resolved != null) return resolved;     else     {         return token;     } } catch {     return token; } }))();
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // initializing _useConstValue
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x14: //ldnull
                case 0x15: //ldc.i4.m1
                case 0x16: //ldc.i4.0
                case 0x17: //ldc.i4.1
                case 0x18: //ldc.i4.2
                case 0x19: //ldc.i4.3
                case 0x1a: //ldc.i4.4
                case 0x1b: //ldc.i4.5
                case 0x1c: //ldc.i4.6
                case 0x1d: //ldc.i4.7
                case 0x1e: //ldc.i4.8
                case 0x72: //ldstr
                case 0xd0: //ldtoken
                    _useConstValue = true;
                    break;
                case 0x1f: //ldc.i4.s
                case 0x20: //ldc.i4
                case 0x21: //ldc.i8
                case 0x22: //ldc.r4
                case 0x23: //ldc.r8
                    _useConstValue = default(bool);
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // initializing _value
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x14: //ldnull
                case 0x15: //ldc.i4.m1
                case 0x16: //ldc.i4.0
                case 0x17: //ldc.i4.1
                case 0x18: //ldc.i4.2
                case 0x19: //ldc.i4.3
                case 0x1a: //ldc.i4.4
                case 0x1b: //ldc.i4.5
                case 0x1c: //ldc.i4.6
                case 0x1d: //ldc.i4.7
                case 0x1e: //ldc.i4.8
                case 0x20: //ldc.i4
                    _value = _useConstValue ? _constValue : ReadI4(reader);
                    break;
                case 0x1f: //ldc.i4.s
                    _value = _useConstValue ? _constValue : (int)ReadI1(reader);
                    break;
                case 0x21: //ldc.i8
                    _value = _useConstValue ? _constValue : ReadI8(reader);
                    break;
                case 0x22: //ldc.r4
                    _value = _useConstValue ? _constValue : ReadR4(reader);
                    break;
                case 0x23: //ldc.r8
                    _value = _useConstValue ? _constValue : ReadR8(reader);
                    break;
                case 0x72: //ldstr
                    _value = _useConstValue ? _constValue : ReadStr(reader);
                    break;
                case 0xd0: //ldtoken
                    _value = _useConstValue ? _constValue : ReadToken(reader);
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                return false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // ldnull, ldc.i4.m1, ldc.i4.0, ldc.i4.1, ldc.i4.2, ldc.i4.3, ldc.i4.4, ldc.i4.5, ldc.i4.6, ldc.i4.7, ldc.i4.8, ldc.i4.s, ldc.i4, ldc.i8, ldc.r4, ldc.r8, ldstr, ldtoken
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x72, 0xd0}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public global::System.Type Type
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x14: //ldnull
                        return default(global::System.Type);
                    case 0x15: //ldc.i4.m1
                    case 0x16: //ldc.i4.0
                    case 0x17: //ldc.i4.1
                    case 0x18: //ldc.i4.2
                    case 0x19: //ldc.i4.3
                    case 0x1a: //ldc.i4.4
                    case 0x1b: //ldc.i4.5
                    case 0x1c: //ldc.i4.6
                    case 0x1d: //ldc.i4.7
                    case 0x1e: //ldc.i4.8
                    case 0x1f: //ldc.i4.s
                    case 0x20: //ldc.i4
                        return typeof(int);
                    case 0x21: //ldc.i8
                        return typeof(long);
                    case 0x22: //ldc.r4
                        return typeof(float);
                    case 0x23: //ldc.r8
                        return typeof(double);
                    case 0x72: //ldstr
                        return typeof(global::System.String);
                    case 0xd0: //ldtoken
                        return _constValue.GetType();
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public global::System.Object Value
        {
            get
            {
                return _value;
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  "ldc";
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            mods.Add(Type == null || OpSpec.OpCode.Value == 0xd0 /*ldtoken*/ ? null : TypeToString(Type));
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = ObjectToCSharpLiteral(Value);

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}