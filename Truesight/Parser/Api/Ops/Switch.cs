//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // switch
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x45)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Switch : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Switch; } }

        private readonly global::System.Collections.ObjectModel.ReadOnlyCollection<global::System.Tuple<int, int>> _targetOffsets;

        internal Switch(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Switch(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // initializing _targetOffsets
            _targetOffsets = ((global::System.Func<global::System.Collections.ObjectModel.ReadOnlyCollection<global::System.Tuple<int, int>>>)(() => 
            {
                var n = ReadI4(reader);
                var pivot = (int)reader.BaseStream.Position + sizeof(int) * n;

                return global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Select(
                    global::System.Linq.Enumerable.Range(1, n), _ => 
                    {
                        var relative = ReadI4(reader);
                        var absolute = pivot + relative;
                        return global::System.Tuple.New(relative, absolute);
                    }));
            }))();

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                return false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // switch
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x45}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public override int SizeOfOperand
        {
            get
            {
                return sizeof(int) + _targetOffsets.Count * sizeof(int);
            }
        }

        public global::System.Collections.ObjectModel.ReadOnlyCollection<int> AbsoluteTargetOffsets
        {
            get
            {
                return global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Select(_targetOffsets, t => t.Item2));
            }
        }

        public global::System.Collections.ObjectModel.ReadOnlyCollection<int> RelativeTargetOffsets
        {
            get
            {
                return global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Select(_targetOffsets, t => t.Item2));
            }
        }

        public global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> Targets
        {
            get
            {
                var resolved = global::System.Linq.Enumerable.Select(AbsoluteTargetOffsets, offset => ResolveReference(offset));
                return global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(resolved);
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  "switch";
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = OffsetsToString(AbsoluteTargetOffsets);

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}