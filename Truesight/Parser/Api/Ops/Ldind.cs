//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // ldind.i1, ldind.u1, ldind.i2, ldind.u2, ldind.i4, ldind.u4, ldind.i8, ldind.i, ldind.r4, ldind.r8, ldind.ref, ldobj
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x71)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Ldind : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Ldind; } }

        private readonly int _typeToken;

        internal Ldind(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Ldind(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // initializing _typeToken
            switch((ushort)OpSpec.OpCode.Value)
            {
                case 0x46: //ldind.i1
                case 0x47: //ldind.u1
                case 0x48: //ldind.i2
                case 0x49: //ldind.u2
                case 0x4a: //ldind.i4
                case 0x4b: //ldind.u4
                case 0x4c: //ldind.i8
                case 0x4d: //ldind.i
                case 0x4e: //ldind.r4
                case 0x4f: //ldind.r8
                case 0x50: //ldind.ref
                    _typeToken = default(int);
                    break;
                case 0x71: //ldobj
                    _typeToken = ReadMetadataToken(reader);
                    break;
                default:
                    throw global::XenoGears.Assertions.AssertionHelper.Fail();
            }

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                var unaligned_ok = prefix is Unaligned;
                var volatile_ok = prefix is Volatile;
                return unaligned_ok || volatile_ok || false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // ldind.i1, ldind.u1, ldind.i2, ldind.u2, ldind.i4, ldind.u4, ldind.i8, ldind.i, ldind.r4, ldind.r8, ldind.ref, ldobj
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x71}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public byte Alignment
        {
            get
            {
                var unaligned = System.Linq.Enumerable.SingleOrDefault(System.Linq.Enumerable.OfType<Unaligned>(Prefixes));
                var defaultAlignment = ((global::System.Func<byte>)(() => { throw new global::System.NotImplementedException(); }))();
                return unaligned != null ? unaligned.Alignment : defaultAlignment;
            }
        }

        public bool IsAligned
        {
            get
            {
                return !IsUnaligned;
            }
        }

        public global::System.Type Type
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x46: //ldind.i1
                        return typeof(sbyte);
                    case 0x47: //ldind.u1
                        return typeof(byte);
                    case 0x48: //ldind.i2
                        return typeof(short);
                    case 0x49: //ldind.u2
                        return typeof(ushort);
                    case 0x4a: //ldind.i4
                        return typeof(int);
                    case 0x4b: //ldind.u4
                        return typeof(uint);
                    case 0x4c: //ldind.i8
                        return typeof(long);
                    case 0x4d: //ldind.i
                        return typeof(global::System.IntPtr);
                    case 0x4e: //ldind.r4
                        return typeof(float);
                    case 0x4f: //ldind.r8
                        return typeof(double);
                    case 0x50: //ldind.ref
                        return typeof(global::System.Object);
                    case 0x71: //ldobj
                        return TypeFromToken(_typeToken);
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public int TypeToken
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x46: //ldind.i1
                    case 0x47: //ldind.u1
                    case 0x48: //ldind.i2
                    case 0x49: //ldind.u2
                    case 0x4a: //ldind.i4
                    case 0x4b: //ldind.u4
                    case 0x4c: //ldind.i8
                    case 0x4d: //ldind.i
                    case 0x4e: //ldind.r4
                    case 0x4f: //ldind.r8
                    case 0x50: //ldind.ref
                        return default(int);
                    case 0x71: //ldobj
                        return _typeToken;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool IsUnaligned
        {
            get
            {
                return global::System.Linq.Enumerable.Any(global::System.Linq.Enumerable.OfType<Unaligned>(Prefixes));
            }
        }

        public bool IsVolatile
        {
            get
            {
                return global::System.Linq.Enumerable.Any(global::System.Linq.Enumerable.OfType<Volatile>(Prefixes));
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  "ldind";
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = ((Type != null ? TypeToString(Type) : null) ?? (("0x" + TypeToken.ToString("x8"))));

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}