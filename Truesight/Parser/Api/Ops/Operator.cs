//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Truesight.Parser.Api.Ops
{
    // add, sub, mul, div, div.un, rem, rem.un, and, or, xor, shl, shr, shr.un, neg, not, add.ovf, add.ovf.un, mul.ovf, mul.ovf.un, sub.ovf, sub.ovf.un, ceq, cgt, cgt.un, clt, clt.un
    [global::Truesight.Parser.Impl.Ops.OpCodesAttribute(0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xfe01, 0xfe02, 0xfe03, 0xfe04, 0xfe05)]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sealed class Operator : global::Truesight.Parser.Impl.ILOp
    {
        public override global::Truesight.Parser.Api.IILOpType OpType { get { return global::Truesight.Parser.Api.IILOpType.Operator; } }

        internal Operator(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader)
            : this(source, reader, global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
        }

        internal Operator(global::Truesight.Parser.Impl.MethodBody source, global::System.IO.BinaryReader reader, global::System.Collections.ObjectModel.ReadOnlyCollection<global::Truesight.Parser.Impl.ILOp> prefixes)
            : base(source, AssertSupportedOpCode(reader), (int)reader.BaseStream.Position - global::System.Linq.Enumerable.Sum(global::System.Linq.Enumerable.Select(prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()), prefix => prefix.Size)), prefixes ?? global::XenoGears.Functional.EnumerableExtensions.ToReadOnly(global::System.Linq.Enumerable.Empty<global::Truesight.Parser.Impl.ILOp>()))
        {
            // this is necessary for further verification
            var origPos = reader.BaseStream.Position;

            // verify that we've read exactly the amount of bytes we should
            var bytesRead = reader.BaseStream.Position - origPos;
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(bytesRead == SizeOfOperand);

            // now when the initialization is completed verify that we've got only prefixes we support
            global::XenoGears.Assertions.AssertionHelper.AssertAll(Prefixes, prefix => 
            {
                return false;
            });
        }

        private static global::System.Reflection.Emit.OpCode AssertSupportedOpCode(global::System.IO.BinaryReader reader)
        {
            var opcode = global::Truesight.Parser.Impl.Reader.OpCodeReader.ReadOpCode(reader);
            global::XenoGears.Assertions.AssertionHelper.AssertNotNull(opcode);
            // add, sub, mul, div, div.un, rem, rem.un, and, or, xor, shl, shr, shr.un, neg, not, add.ovf, add.ovf.un, mul.ovf, mul.ovf.un, sub.ovf, sub.ovf.un, ceq, cgt, cgt.un, clt, clt.un
            global::XenoGears.Assertions.AssertionHelper.AssertTrue(global::System.Linq.Enumerable.Contains(new ushort[]{0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xfe01, 0xfe02, 0xfe03, 0xfe04, 0xfe05}, (ushort)opcode.Value.Value));

            return opcode.Value;
        }


        public bool ExpectsUn
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x58: //add
                    case 0x59: //sub
                    case 0x5a: //mul
                    case 0x5b: //div
                    case 0x5d: //rem
                    case 0x5f: //and
                    case 0x60: //or
                    case 0x61: //xor
                    case 0x62: //shl
                    case 0x63: //shr
                    case 0x65: //neg
                    case 0x66: //not
                    case 0xd6: //add.ovf
                    case 0xd8: //mul.ovf
                    case 0xda: //sub.ovf
                    case 0xfe01: //ceq
                    case 0xfe02: //cgt
                    case 0xfe04: //clt
                        return default(bool);
                    case 0x5c: //div.un
                    case 0x5e: //rem.un
                    case 0x64: //shr.un
                    case 0xd7: //add.ovf.un
                    case 0xd9: //mul.ovf.un
                    case 0xdb: //sub.ovf.un
                    case 0xfe03: //cgt.un
                    case 0xfe05: //clt.un
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public bool FailsOnOverflow
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x58: //add
                    case 0x59: //sub
                    case 0x5a: //mul
                    case 0x5b: //div
                    case 0x5c: //div.un
                    case 0x5d: //rem
                    case 0x5e: //rem.un
                    case 0x5f: //and
                    case 0x60: //or
                    case 0x61: //xor
                    case 0x62: //shl
                    case 0x63: //shr
                    case 0x64: //shr.un
                    case 0x65: //neg
                    case 0x66: //not
                    case 0xfe01: //ceq
                    case 0xfe02: //cgt
                    case 0xfe03: //cgt.un
                    case 0xfe04: //clt
                    case 0xfe05: //clt.un
                        return default(bool);
                    case 0xd6: //add.ovf
                    case 0xd7: //add.ovf.un
                    case 0xd8: //mul.ovf
                    case 0xd9: //mul.ovf.un
                    case 0xda: //sub.ovf
                    case 0xdb: //sub.ovf.un
                        return true;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public Truesight.Parser.Api.Ops.OperatorType OperatorType
        {
            get
            {
                switch((ushort)OpSpec.OpCode.Value)
                {
                    case 0x58: //add
                    case 0xd6: //add.ovf
                    case 0xd7: //add.ovf.un
                        return Truesight.Parser.Api.Ops.OperatorType.Add;
                    case 0x59: //sub
                    case 0xda: //sub.ovf
                    case 0xdb: //sub.ovf.un
                        return Truesight.Parser.Api.Ops.OperatorType.Subtract;
                    case 0x5a: //mul
                    case 0xd8: //mul.ovf
                    case 0xd9: //mul.ovf.un
                        return Truesight.Parser.Api.Ops.OperatorType.Multiply;
                    case 0x5b: //div
                    case 0x5c: //div.un
                        return Truesight.Parser.Api.Ops.OperatorType.Divide;
                    case 0x5d: //rem
                    case 0x5e: //rem.un
                        return Truesight.Parser.Api.Ops.OperatorType.Modulo;
                    case 0x5f: //and
                        return Truesight.Parser.Api.Ops.OperatorType.And;
                    case 0x60: //or
                        return Truesight.Parser.Api.Ops.OperatorType.Or;
                    case 0x61: //xor
                        return Truesight.Parser.Api.Ops.OperatorType.Xor;
                    case 0x62: //shl
                        return Truesight.Parser.Api.Ops.OperatorType.LeftShift;
                    case 0x63: //shr
                    case 0x64: //shr.un
                        return Truesight.Parser.Api.Ops.OperatorType.RightShift;
                    case 0x65: //neg
                        return Truesight.Parser.Api.Ops.OperatorType.Negate;
                    case 0x66: //not
                        return Truesight.Parser.Api.Ops.OperatorType.Not;
                    case 0xfe01: //ceq
                        return Truesight.Parser.Api.Ops.OperatorType.Equal;
                    case 0xfe02: //cgt
                    case 0xfe03: //cgt.un
                        return Truesight.Parser.Api.Ops.OperatorType.GreaterThan;
                    case 0xfe04: //clt
                    case 0xfe05: //clt.un
                        return Truesight.Parser.Api.Ops.OperatorType.LessThan;
                    default:
                        throw global::XenoGears.Assertions.AssertionHelper.Fail();
                }
            }
        }

        public override global::System.String ToString()
        {
            var offset = OffsetToString(Offset) + ":";
            var prefixSpec = Prefixes.Count == 0 ? "" : ("[" + global::XenoGears.Functional.EnumerableExtensions.StringJoin(Prefixes) + "]");
            var name =  OperatorTypeToString(OperatorType);
            var mods = new global::System.Collections.Generic.List<global::System.String>();
            mods.Add(ExpectsUn ? "un" : "");
            mods.Add(FailsOnOverflow ? "ovf" : "");
            var modSpec = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(mods, mod => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(mod)), ", ");
            var operand = "";

            var parts = new []{offset, prefixSpec, name, modSpec, operand};
            var result = global::XenoGears.Functional.EnumerableExtensions.StringJoin(global::System.Linq.Enumerable.Where(parts, p => global::XenoGears.Functional.EnumerableExtensions.IsNeitherNullNorEmpty(p)), " ");

            return result;
        }
    }
}